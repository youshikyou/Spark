BasicRDD : Transformations
map(),filter(),flatMap(),and union()

flatMap transformation returns multiple values for each element in the original RDD 
RDD = sc.parallelize(["hello world", "how are you"])
RDD_flatmap = RDD.flatMap(lambda x: x.split(" "))
["hello","world","how","are","you"]


Basic RDD :Actions 
collect(),
take(N),
first(),
count(),
reduce()
x = [1,3,4,6]
RDD = sc.parallelize(x)
RDD.reduce(lambda x, y : x + y)
result is 14

saveAsTextFile()
in to a text file inside a directory with
each partition as a separate file
RDD.saveAsTextFile("tempFile")
coalesce()method can be used to save RDD as a single text 
fileRDD.coalesce(1).saveAsTextFile("tempFile")



Paired RDD : Transformations 
reduceByKey(func):Combine values with the same key 
groupByKey():Group values with the same key 
sortByKey():Return an RDD sorted by the key
join():Join two pair RDDs based on their key

Paried RDD : Actions
countByKey()
rdd = sc.parallelize([("a", 1), ("b", 1), ("a", 1)])
for kee, val in rdd.countByKey().items():  
  print(kee, val)
result is ('a', 2)('b', 1)



collectAsMap()
sc.parallelize([(1, 2), (3, 4)]).collectAsMap()
result is {1: 2, 3: 4}



RDD=sc.parallelize(list)
list(map(lambda x: func, list))
RDD1 = RDD.map(lambda x: func)
result = RDD1.collect()

fileRDD=sc.textFile(file_path,minPartitions = num)
list(filter(lambda x: func,list))
fileRDD_filter = fileRDD.filter(lambda x: func)
fileRDD_filter.take(4)
